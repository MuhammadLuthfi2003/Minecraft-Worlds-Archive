// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

/* Workaround for https://bugs.mojang.com/browse/MCPE-40059 */
#if defined(MCPE40059)
varying highp vec3 wPos;
varying float cameraDist;
varying highp vec3 vNormal;
varying float flickerFactor;
varying float desatFactor;
flat varying float clearWeather;
flat varying float waterFlag;
varying float waterPlane;
#endif

varying vec4 color;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"
#include "natural-mystic-color.h"
#include "natural-mystic-config.h"
#include "natural-mystic-fog.h"
#include "natural-mystic-hacks.h"
#include "natural-mystic-light.h"
#include "natural-mystic-rain.h"
#include "natural-mystic-water.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;

	/* The game appears to encode an ambient occlusion in the vertex
	 * color in this case. Abuse it to create more shadows. */
	float occlusion = occlusionFactor(inColor.rgb);
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;

	float occlusion = 1.0; /* Assume it's not occluded at all. */
#endif

	/* Fetch the level of daylight (i.e. the one which darkens at
	 * night) from the light map passed by the upstream. Note that we
	 * intentionally reduce the dynamic range because the upstream
	 * daylight level doesn't drop to zero at night. */
	float daylight = texture2D(TEXTURE_1, vec2(0.0, 1.0)).r;
	daylight = smoothstep(0.4, 1.0, daylight);

	/* Fetch the level of ambient light from the light map passed by
	 * the upstream. The constant multiplifier is determined so the
	 * intensity will be 6 on the Overworld and 26 in the
	 * Nether/End. */
	float ambientBrightness = texture2D(TEXTURE_1, vec2(0.0, 0.0)).r * 44.797;

	/* Calculate the color of the ambient light based on the fog
	 * color. We'll use it at several places. Note that the .a
	 * component denotes the intensity. */
#if defined(UNDERWATER)
	const bool isUnderwater = true;
#else
	const bool isUnderwater = false;
#endif /* defined(UNDERWATER) */

	vec3 ambientColor;
#if defined(FOG) && defined(MCPE40059)
	if (isRenderDistanceFog(FOG_CONTROL)) {
		/* Don't use the fog color in this case, as it would be
		 * slightly different from the color of near terrain. */
		ambientColor = ambientLightColor(uv1.y, daylight);
	}
	else {
		/* The existence of bad weather fog (and also underwater fog)
		 * should increase the intensity of ambient light (#32). But
		 * at night it should work the other way.
		 */
		if (isUnderwater) {
			ambientColor = ambientLightColor(fogColor);
			ambientBrightness *= mix(0.9, 1.4, daylight);
		}
		else {
			ambientColor = mix(
				ambientLightColor(fogColor),
				ambientLightColor(uv1.y, daylight),
				clearWeather);
			ambientBrightness *= mix(mix(0.9, 1.4, daylight), 1.0, clearWeather);
		}
	}
#else
	ambientColor = ambientLightColor(uv1.y, daylight);
#endif /* defined(FOG) */

	/* Save the diffused color here as the color of the material. We
	 * are going to redo all the lightings with our own HDR method. */
	vec3 pigment = diffuse.rgb;

	/* Accumulate all the light to one linear RGB vector. We are going
	 * to use it for diffuse lighting, and also specular lighting. */
	vec3 dirLight   = vec3(0);
	vec3 undirLight = vec3(0);

	undirLight += ambientLight(ambientColor, ambientBrightness);
#if defined(FOG) && defined(MCPE40059)
	/* When it's raining the sunlight shouldn't affect the scene
	 * (#24), but we cannot treat the rain as a boolean switch as that
	 * would cause #40. */
	if (isUnderwater) {
		dirLight += sunlight(uv1.y, daylight);
		dirLight += moonlight(uv1.y, daylight);
	}
	else {
		dirLight += sunlight(uv1.y, daylight) * clearWeather;
		dirLight += moonlight(uv1.y, daylight) * clearWeather;
	}
#else
	dirLight += sunlight(uv1.y, daylight);
	dirLight += moonlight(uv1.y, daylight);
#endif /* FOG */
	undirLight += skylight(uv1.y, daylight);
#if defined(MCPE40059)
	/* Torchlight is directional, but since we don't actually know
	 * their directions we have to consider it as undirectional. */
	undirLight += torchLight(uv1.x, uv1.y, daylight, flickerFactor);
#endif

	/* Light sources should be significantly brighter than regular
	 * objects. */
#if defined(ALWAYS_LIT)
	undirLight += emissiveLight(flickerFactor);
#endif

	/* Now we finished accumulating light. Compute the diffuse light
	 * and the specular light here. We assume the color of specular
	 * light is always the same as the color of accumulated light. */
#if defined(MCPE40059)
	vec3  sNormal = normalize(cross(dFdx(wPos), dFdy(wPos)));
	float wet     = wetness(clearWeather, uv1.y);
	if (waterFlag > 0.5) {
		/* Compute the specular light and the opacity of water. It is
		 * tempting to do this only when defined(BLEND), but if we do
		 * that water in far terrain will have different colors.
		 *
		 * We need a per-fragment normal here, which is an
		 * interpolated vertex normal passed by our vertex
		 * shader. However, we can't compute it correctly for anything
		 * other than flat top surfaces because the game doesn't tell
		 * us anything about normals. In the fragment shader we can
		 * compute the surface normal with dFdx/dFdy but it's only a
		 * normal of flat triangles. Luckily for us as the water
		 * volume decreases the perturbance also decreases and thus
		 * the surface becomes more and more flat. So to disguise the
		 * problem we mix the flat surface normal with the smooth,
		 * analytical but the incorrect one, using the volume. */
		vec3 fNormal  = normalize(mix(sNormal, vNormal, waterPlane));

#  if defined(ENABLE_WAVES)
		/* Perturb the normal even more, but this time with much higher
		 * frequencies. This is a kind of bump mapping. */
		const float distThreshold = 0.6;
		const float distFadeStart = distThreshold * 0.8;
		if (cameraDist < distThreshold) {
			/* But perturbing the normal on far geometry doesn't
			 * contribute to the overall quality, and it may even cause
			 * aliasing. */
			fNormal = mix(waterWaveNormal(wPos, TIME, fNormal), fNormal,
						  smoothstep(distFadeStart, distThreshold, cameraDist));
			fNormal = normalize(fNormal);
		}
#  endif /* defined(ENABLE_WAVES) */

		diffuse.rgb  = pigment * (dirLight + undirLight);
		diffuse.rgb *= 0.5; // Darken the base water color.

#  if defined(ENABLE_SPECULAR)
		vec4 specular = waterSpecularLight(diffuse.a, dirLight, undirLight, wPos, VIEW_POS, TIME, fNormal);

		diffuse.rgb += specular.rgb;
		diffuse.a    = specular.a;
#  endif /* defined(ENABLE_SPECULAR) */

#  if defined(ENABLE_RIPPLES)
		if (wet > 0.0) {
			diffuse.rgb += wet * ripples(dirLight + undirLight, wPos, cameraDist, TIME, fNormal);
		}
#  endif /* defined(ENABLE_RIPPLES) */
	}
	else {
#  if defined(ENABLE_OCCLUSION_SHADOWS)
		/* The intensity of directional light should be affected by the
		 * occlusion factor. */
		const float occlShadow = 0.35;
		dirLight *= mix(occlShadow, 1.0, occlusion);
#  endif /* defined(ENABLE_OCCLUSION_SHADOWS) */

		/* Wet ground should have reduced diffuse light if it's made
		 * of a rough material. But for now it's a constant value
		 * because we don't know what a material it's made of. */
		diffuse.rgb = pigment * (dirLight + undirLight);
		diffuse.rgb *= mix(1.0, 0.5, wet);

#  if defined(ENABLE_SPECULAR)
		const float fresnel   = 0.04;
		const float shininess = 2.0;
		vec3 specular = specularLight(fresnel, shininess, dirLight, undirLight, wPos, VIEW_POS, sNormal);

		diffuse.rgb *= 1.0 - fresnel;
		diffuse.rgb += specular * mix(1.0, 5.0, wet);
#  endif /* defined(ENABLE_SPECULAR) */

#  if defined(ENABLE_RIPPLES)
		if (wet > 0.0) {
			diffuse.rgb += wet * ripples(dirLight + undirLight, wPos, cameraDist, TIME, sNormal);
		}
#  endif /* defined(ENABLE_RIPPLES) */
	}
#endif /* defined(MCPE40059) */

	diffuse.rgb = uncharted2ToneMap(diffuse.rgb, 112.0, 1.0);
	diffuse.rgb = contrastFilter(diffuse.rgb, 1.25);

	/* Reduce the contrast of far objects (#5). The overall color
	 * should lean towards the ambient. And we also apply a permanent
	 * fog. It should ideally be biome-specific (#9) but we can't do
	 * that currently, so we always use the ambient color. */
#if defined(ENABLE_BASE_FOG) && defined(MCPE40059)
	const float contrast   = 0.45;
	const float fogDensity = 0.4;
	diffuse.rgb = mix(
		diffuse.rgb,
		mix(contrastFilter(diffuse.rgb, contrast) * ambientColor,
			fogBrightness(uv1.x, uv1.y, daylight) * ambientColor,
			fogDensity),
		desatFactor);
#endif

	/* We can't apply fogs before doing tone mapping, because that
	 * changes the fog color and breaks "render distance fog". */
#ifdef FOG
	if (isUnderwater || isRenderDistanceFog(FOG_CONTROL)) {
		diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
	}
	else {
		/* During a bad weather everything should look dull. We do a
		 * desaturation for that (#6). The reason for the mix() is so
		 * fogs not only reduce saturation but also contrast.
		 */
		diffuse.rgb = mix(
			desaturate(diffuse.rgb, fogColor.a) * ambientColor,
			fogColor.rgb,
			fogColor.a);
	}
#endif

#if defined(DEBUG_SHOW_VERTEX_COLOR)
	diffuse = color;

#elif defined(DEBUG_SHOW_SUNLIGHT_LEVEL)
	diffuse.rgb = vec3(uv1.y);

#elif defined(DEBUG_SHOW_OCCLUSION_FACTOR)
	diffuse.rgb = vec3(occlusion);

#elif defined(DEBUG_SHOW_FOG_COLOR)
	diffuse.rgb = FOG_COLOR.rgb;

#elif defined(DEBUG_SHOW_FOG_CONTROL) && defined(MCPE40059)
	diffuse.rgb = vec3(cameraDist < 0.5 ? FOG_CONTROL.x : FOG_CONTROL.y);

#endif /* DEBUG */

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: t
// End:
