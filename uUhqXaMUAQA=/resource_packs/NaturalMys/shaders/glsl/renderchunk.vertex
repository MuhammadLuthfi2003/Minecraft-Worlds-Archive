// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "vertexVersionCentroid.h"
#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

/* Workaround for https://bugs.mojang.com/browse/MCPE-40059 */
#if defined(MCPE40059)
varying highp vec3 wPos;
varying float cameraDist;
varying highp vec3 vNormal; // Vertex normal in the world space. Only
							// defined when waterPlane > 0.0.
varying float flickerFactor;
varying float desatFactor;
flat varying float clearWeather; // [0, 1]
flat varying float waterFlag;    // 0.0 or 1.0
varying float waterPlane;        // [0, 1]
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"
#include "natural-mystic-color.h"
#include "natural-mystic-config.h"
#include "natural-mystic-fog.h"
#include "natural-mystic-hacks.h"
#include "natural-mystic-light.h"
#include "natural-mystic-water.h"

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

void main()
{
    POS4 worldPos;
#if !defined(MCPE40059)
	float cameraDist;
#endif
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
#endif

#if defined(MCPE40059)
	/* THINKME: In theory this should be the position of the
	 * vertex in the world coordinates without getting affected by
	 * the view position, but actually it's not working as
	 * expected. I don't know why. (#36) */
	wPos = worldPos.xyz;

	vNormal = vec3(0);
	flickerFactor = 1.0;
#  if defined(ENABLE_TORCH_FLICKER)
	if (uv1.x > 0.0) {
		flickerFactor = torchLightFlicker(worldPos.xyz, TIME);
	}
#  endif
#endif /* defined(MCPE40059) */

///// find distance from the camera
	vec3 relPos = -worldPos.xyz;
	float cameraDepth = length(relPos);
	cameraDist = cameraDepth / RENDER_DISTANCE;

	/* Reduce the contrast of far objects (#5). The overall color
	 * should lean towards the ambient. Note that cameraDist is a
	 * normalized camera distance being 1.0 at the point where the far
	 * terrain fog ends. */
#if defined(FANCY) && defined(MCPE40059)
	desatFactor = exponentialFog(vec2(0.0, 4.0), cameraDist);
#endif

	/* Detect the weather on the Overworld. */
#if defined(MCPE40059)
#  if defined(FOG)
	clearWeather = isClearWeather(FOG_CONTROL);
#  else
	clearWeather = 1.0;
#  endif
#endif

///// apply fog

#ifdef FOG
	float len = cameraDist;
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif

    fogColor.rgb = FOG_COLOR.rgb;
#  if defined(FOG_TYPE)
#    if FOG_TYPE == FOG_TYPE_LINEAR
	fogColor.a = linearFog(FOG_CONTROL, len);
#    elif FOG_TYPE == FOG_TYPE_EXP
	fogColor.a = exponentialFog(FOG_CONTROL, len);
#    elif FOG_TYPE == FOG_TYPE_EXP2
	fogColor.a = exponentialSquaredFog(FOG_CONTROL, len);
#    endif
#  else
	fogColor.a = 0.0; /* Fog disabled? Really?? */
#  endif /* defined(FOG_TYPE) */
#endif /* FOG */

	/* Waves */
	vec3 hsvColor = rgb2hsv(COLOR.rgb);
#if defined(MCPE40059)
	waterFlag  = isWater(hsvColor) ? 1.0 : 0.0;
	waterPlane = 0.0;
#endif
#if !defined(BYPASS_PIXEL_SHADER) && !defined(AS_ENTITY_RENDERER) && defined(ENABLE_WAVES) && defined(MCPE40059)
#  if defined(ALPHA_TEST)
	/* ALPHA_TEST means that the block being rendered isn't a solid
	 * opaque one. This excludes grass blocks especially. */
	bool grassFlag = isGrass(hsvColor);
#  else
	const bool grassFlag = false;
#  endif
	if (grassFlag) {
		POS3 posw = POSITION.xyz;
		highp float wave = sin(TIME * 3.5 + 2.0 * posw.x + 2.0 * posw.z + posw.y);
		gl_Position.x += wave * 0.015;
	}
	else if (waterFlag > 0.5) {
		/* We want water to swell in proportion to its volume. The more
		 * the vertex is close to the ground (i.e. integral points in the
		 * world position), the less the vertex should swell. Without this
		 * tweak the water will leave the ground. */
		highp float volume = fract(POSITION.y);
		if (volume > 0.0) {
			highp vec3 wPos1     = waterWaveGeometric(wPos, TIME, vNormal);
			highp vec3 wPosDelta = (wPos1 - wPos) * volume;
			worldPos.xyz += wPosDelta;
			wPos          = worldPos.xyz + VIEW_POS;
			gl_Position   = PROJ * (WORLDVIEW * worldPos);
		}

#  if defined(FANCY)
		/* When we know the surface normal we can do something
		 * advanced. */
		if (isWaterPlane(POSITION)) {
			waterPlane = 1.0;
		}
		// The default opacity of water is way too high. Reduce it.
		color.a *= 0.5;
#  endif /* defined(FANCY) */
	}
#endif /* !defined(BYPASS_PIXEL_SHADER) && !defined(AS_ENTITY_RENDERER) && defined(ENABLE_WAVES) */

///// blended layer (mostly water) magic
#ifdef BLEND
	//Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	//to fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
		#else
			// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
		#endif //FANCY

		float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		color.a = mix(color.a, 1.0, alphaFadeOut);
	}
#endif

#ifndef BYPASS_PIXEL_SHADER
	#ifndef FOG
		// If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * 0.000001;
	#endif
#endif
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: t
// End:
