// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionSimple.h"
#include "uniformPerFrameConstants.h"
#include "natural-mystic-cloud.h"
#include "natural-mystic-config.h"

varying vec4 skyColor;
varying vec4 cloudColor;
varying vec3 worldPos;
varying float camDist;

void main() {
#if defined(ENABLE_FBM_CLOUDS)

    /* NOTE: It seems modifying materials/fancy.json takes no effect
     * on 1.8. We want to reduce the number of octaves when
     * !defined(FANCY) but we can't do it for now, because FANCY gets
     * never defined in this shader. */
    const int octaves = 6;

    /* We are going to perform a (sort of) volumetric ray marching to
     * compute self-casting shadows of clouds (#46), but with only a
     * few steps. This is because ray marching is terribly expensive
     * as we cannot precompute noises in a texture and instead we have
     * to generate them on the fly. See also
     * http://www.iquilezles.org/www/articles/dynclouds/dynclouds.htm */
    highp float density = cloudMap(octaves, 0.5, 0.85, TIME, worldPos);
    vec4 shadedCloud = mix(vec4(cloudColor.rgb, 0.0), cloudColor, density);

#  if defined(ENABLE_CLOUD_SHADE)
    /* Optimization: Don't bother to do it when there are no clouds at
     * the current position. */
    if (density > 0.0) {
        /* The game doesn't tell us where the sun or the moon is,
         * which is so unfortunate. We have to assume they are always
         * at a fixed point. */
        const highp vec3 sunMoonPos = vec3(-0.3, 4.0, 0);

        const int   numSteps = 1; /* Yes, it has to be this few, or
                                   * we'll get a lag. */
        const float stepSize = 0.2;
        vec3        rayStep  = normalize(sunMoonPos - worldPos) * stepSize;
        highp vec3  rayPos   = worldPos;
        float       inside   = 0.0;
        for (int i = 0; i < numSteps; i++) {
            rayPos += rayStep;
            highp float height = cloudMap(octaves / 2, 0.4, 1.0, TIME, rayPos);
            inside += max(0.0, height - (rayPos.y - worldPos.y));
        }
        /* Average of height differences. This isn't a distance of ray
         * traveled inside clouds in a normal sense, but if we do it
         * strictly we get severe banding artifacts (because of the
         * number of steps being too few). */
        inside /= float(numSteps);

        float brightness = cloudColor.r;
        shadedCloud.rgb = mix(
            shadedCloud.rgb + 0.1 * brightness, // highlight
            max(vec3(0.0), shadedCloud.rgb - 0.2 * brightness), // shade
            inside);
    }
#  endif /* defined(ENABLE_CLOUD_SHADE) */
    shadedCloud.rgb = mix(skyColor.rgb, shadedCloud.rgb, shadedCloud.a);

    /* Clouds near the horizon should be blended back to the sky
     * color, or otherwise the planar nature of the sky plane will be
     * even more apparent. */
    gl_FragColor = mix(shadedCloud, skyColor, smoothstep(0.9, 1.0, camDist));

#else
    gl_FragColor = skyColor;
#endif /* ENABLE_FBM_CLOUDS */
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: nil
// End:
